#!/bin/bash

# ksi-const-random-next-block.sh is continuation to ksi-const-random.sh as it
# uses ksistate file generated by the latter to start next block with the
# previous leaf value.

. ${srcdir:=.}/ksi/ksi-test-common.sh

testPatterns=(
"[{]M[}]"
"input hash: SHA-256:0e8d62780cfc34384f84ca9de28edd7e3f2391739a640fce9eff6d20596808a5"
"output hash: SHA-256:0e8d62780cfc34384f84ca9de28edd7e3f2391739a640fce9eff6d20596808a5"
"Block no.   1: processing block signature data... ok"
"Finalizing log signature... ok"
"Block no.   1: Meta-record value: 'Block closed due to file closure"
)

outFileName="log-const-random-next-block"
previousStateFile="${srcdir:=.}/ksi/log-const-random.ksistate"
randomSource="${srcdir:=.}/ksi/const-string"
recordCount=4
files=(
"$outPath/${outFileName}"
)


check_command_available "logksi -h"
cleanOutFiles "${files[@]}"

# Create state file, containing previous leaf value.
cp $previousStateFile $outPath/${outFileName}.ksistate


callTestFunc "-cdx $extraOpt -N $recordCount -H SHA256 -R $randomSource" "${files[@]}"
integrateAll "${files[@]}"

# gttlvdump -Pp out/log-static-sign.logsig.parts/blocks.dat | grep TLV.0903
logksi verify --ver-int -dd out/log-static-sign


# Note that exit code of verify is ignored as its output
# is verified in the next step.
declare -i i=0

for filename in "${files[@]}"; do
  res[$i]=$(logksi verify --hex-to-str --ver-int -ddd $filename 2>&1) || true
  i+=1
done

verifyPattern "${res[@]}"

exit_test
